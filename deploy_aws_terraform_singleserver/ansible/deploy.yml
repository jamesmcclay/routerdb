---
- hosts: all
  become: false
  gather_facts: false
  vars:
    local_user: "jamesmcclay"
    local_home: "/Users/{{ local_user }}"
    local_projectdir: "{{ local_home }}/routerdb"
    user: "{{ ansible_user }}"
    db_user: "james"
    db_name: "routerdb"
    db_password: "james"
    dst_root_dir: "/opt/routerdatabase"
    src_app_dir: "{{ local_projectdir }}/routerdb_django"
    dst_app_dir: "/opt/routerdatabase/routerdb_django"
    npm_dir: "{{ local_projectdir }}/frontend_react_vite"
    src_react_dir: "{{ local_projectdir }}/frontend_react_vite/dist"
    dst_react_dir: "/opt/routerdatabase/dist"
    www_host: "{{ ansible_host }}"
    initial: true
  tasks:

    - name: Install Python pip
      apt: 
        name: "{{ item }}"
        update_cache: true 
        state: present
      become: true
      with_items:
        - python3-pip
        - python-is-python3
        - postgresql
        - postgresql-contrib
        - acl
        - nginx
      when: initial
    
    - name: start nginx
      service:
          name: nginx
          state: started

    - name: Create routerdb project dir at {{ dst_app_dir }}
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: 0755
      become: true
      loop:
        - "{{ dst_root_dir }}"
        - "{{ dst_app_dir }}"
        - "{{ dst_react_dir }}"

    - name: Compress directory {{ src_app_dir }} into {{ src_app_dir }}/deploy_archive.tgz
      archive:
        path: "{{ src_app_dir }}"
        dest: "{{ src_app_dir }}/deploy_archive.tgz"
      delegate_to: localhost

    - name: Copy project archive to remote
      copy:
        src: "{{ src_app_dir }}/deploy_archive.tgz"
        dest: "{{ dst_root_dir }}/deploy_archive.tgz"
        owner: "{{ user }}"
        group: "{{ user }}"

    - name: Copy react to remote
      copy:
        src: "{{ src_react_dir }}"
        dest: "{{ dst_root_dir }}"
        owner: "{{ user }}"
        group: "{{ user }}"

    - name: Extract package
      unarchive:
        src: "{{ dst_root_dir }}/deploy_archive.tgz"
        dest: "{{ dst_root_dir }}"
        remote_src: yes

    - name: Install python requirements
      pip:
        requirements: "{{ dst_app_dir }}/requirements.txt"

    - name: Create Nginx config file
      template: 
        src: nginx.conf.j2 
        dest: /etc/nginx/sites-available/default
        mode: 0777
        owner: root
      become: true
      notify: reload nginx

    - name: Create Gunicorn Socket Unit file
      template: 
        src: routerdb.socket.j2 
        dest: /etc/systemd/system/routerdb.socket
        mode: 644
        owner: "{{ user }}"
        group: "{{ user }}"
      become: true
      notify: reload systemd

    - name: Create App Unit file
      template: 
        src: routerdb.service.j2 
        dest: /etc/systemd/system/routerdb.service
        mode: 644
        owner: "{{ user }}"
        group: "{{ user }}"
      become: true
      notify: reload systemd

    - name: "Find out if PostgreSQL is initialized"
      ansible.builtin.stat:
        path: "/var/lib/postgresql/14/main/postgresql.auto.conf"
      register: postgres_data
      become: true

    - name: "Initialize PostgreSQL"
      shell: "postgresql-setup initdb"
      when: not postgres_data.stat.exists
 
    - name: "Start and enable services"
      service: "name={{ item }} state=started enabled=yes"
      with_items:
        - postgresql

    - name: "Install psycopg2-binary for postgres"
      pip: "name={{ item }}  state=present"
      with_items:
        - psycopg2-binary
      become: true
      become_user: postgres

    - name: "Allow md5 connection for the db user"
      postgresql_pg_hba:
        dest: "/etc/postgresql/14/main/pg_hba.conf"
        contype: host
        databases: all
        method: md5
        users: "{{ db_user }}"
        create: true
      become: true
      notify: restart postgres

    - name: "Create app database"
      postgresql_db:
        state: present
        name: "{{ db_name }}"
      become: yes
      become_user: postgres

    - name: "Create db user"
      postgresql_user:
        state: present
        name: "{{ db_user }}"
        password: "{{ db_password }}"
      become: yes
      become_user: postgres

    - name: "Grant db user access to app db"
      postgresql_privs:
        type: database
        database: "{{ db_name }}"
        roles: "{{ db_user }}"
        grant_option: no
        privs: all
      become: yes
      become_user: postgres

    - name: Ensure gunicorn socket started
      service: 
        name: routerdb.socket
        state: started
        enabled: true
      become: true

    - name: Migrate postgres
      shell: "./manage.py migrate"
      args:
        chdir: "{{ dst_app_dir }}"

    - name: Start Router DB
      service: 
        name: routerdb.service 
        state: restarted
        enabled: true
      become: true

  handlers:
    - name: restart postgres
      service: 
        name: postgresql 
        state: restarted
      become: true

    - name: reload systemd
      systemd:
        state: reloaded
        daemon_reload: true
        name: routerdb
      become: true

    - name: reload nginx
      systemd:
        state: restarted
        name: nginx
      become: true